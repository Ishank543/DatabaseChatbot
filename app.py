from dotenv import load_dotenv
import os
from flask import Flask, render_template, request, jsonify
import google.generativeai as genai
import mysql.connector
import re

# Load environment variables
load_dotenv()

# Configure the Gemini API key
genai.configure(api_key=os.getenv("GOOGLE_GEMINI_API_KEY"))

# Initialize Flask
app = Flask(__name__)

# Define the Gemini prompt
prompt = [
    """
    You are an expert in SQL queries!

    The SQL database contains the following tables:

    Table 1: employees
    Columns: S_No (INT NOT NULL PRIMARY KEY), Name (VARCHAR(100)), Department (VARCHAR(100)), Age (INT)

    Please provide an English question related to these tables, and I'll help you generate the corresponding SQL query.
    also the sql code should not have ``` in beginning or end and sql word in output
    """
]

def get_gemini_response(user_text, ai_prompt):
    model = genai.GenerativeModel('gemini-pro')
    ai_response = model.generate_content([ai_prompt[0], user_text])

    # Log the raw response from Gemini for debugging
    app.logger.info(f"Raw Gemini Response: {ai_response.text}")

    # Extract the SQL query from the response by finding the SQL portion
    match = re.search(r"(SELECT .*?;)", ai_response.text, re.DOTALL | re.IGNORECASE)

    if match:
        # If a match is found, clean and return it
        sql_query = match.group(1).strip()
        app.logger.info(f"Cleaned SQL Query: {sql_query}")
        return sql_query
    else:
        # If no valid SQL query is found, raise an error
        raise Exception("No valid SQL query was found in the Gemini response.")

def read_sql_query(sql_query):
    conn = mysql.connector.connect(
        host=os.getenv("DB_HOST"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD"),
        database=os.getenv("DB_NAME")
    )
    cur = conn.cursor()
    cur.execute(sql_query)
    rows = cur.fetchall()
    conn.commit()
    conn.close()
    return rows

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/process_voice_input', methods=['POST'])
def process_voice_input():
    user_text = request.json.get('text')
    try:
        if not user_text:
            raise Exception("User input cannot be null")

        # Get the SQL query generated by Gemini
        response = get_gemini_response(user_text, prompt)
        
        if not response:
            raise Exception("Gemini did not return a valid SQL query.")
        
        # Check if response looks like a valid SQL query
        if "select" not in response.lower():
            raise Exception(f"Invalid SQL query returned: {response}")

        # Process the SQL query and get the result
        query_result = read_sql_query(response)
        
        # Log the query result for debugging
        app.logger.info(f"Query Result: {query_result}")
        
        # Format the result into a suitable form
        formatted_result = [str(row) for row in query_result]
        
        return jsonify({"result": formatted_result})

    except Exception as e:
        # Log the error with full traceback for debugging
        app.logger.error(f"Error processing request: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)